- hosts: localhost
  vars_prompt:
          - name: "db_name"
            prompt: "enter database name"
            private: no
          - name: "user"
            prompt: "enter the master username"
            private: no 
          - name: "pass_wd"
            prompt: "enter the password for your database master"
            private: yes
  vars_files:
          - "secret.yml"
  vars:
    key_name: my_aws             # Key used for SSH
    region: eu-north-1       # Region may affect response and pricing
    image: ami-0d74f1e79c38f2933 # look in ec2 > ami (filter owner alias: amazon) or amis of manually launched instances
    id: "example testing"
    instance_type: t3.micro       # Choose instance type, check AWS for pricing
    # vpc_id: subnet-012345
    sec_group: "testgroup"
  tasks:
    - name: Create security group
      amazon.aws.ec2_security_group:
          name: "{{ sec_group }}"
          description: "Sec group for app"
          region: "{{ region }}"
          aws_access_key: "{{u}}"  # From vault as defined
          aws_secret_key: "{{p}}"  # From vault as defined
          rules:                                # allows ssh on port 22
            - proto: tcp
              ports:
                - 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on ssh port
    - name: create a new EC2 key pair, returns generated private key
      # use no_log to avoid private key being displayed into output
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        region: "{{ region }}"
        aws_access_key: "{{u}}"  # From vault as defined
        aws_secret_key: "{{p}}"  # From vault as defined
      no_log: true
      register: mykey
    - name: "debugging the output"
      debug:
        var: mykey
   
    - name: write to file
      copy: whencontent="{{ mykey.key.private_key }}" dest="~/.ssh/{{ keyname }}.pem" mode=0600
      when: mykey.changed

    - name: Provisioning EC2 instances
      amazon.aws.ec2_instance:
            name: "public-compute-instance"
            key_name: "{{ key_name }}"
            # vpc_subnet_id: "{{ vpc_id }}"
            instance_type: "{{ instance_type }}"
            security_group: "{{ sec_group }}"
            aws_access_key: "{{ u }}"
            aws_secret_key: "{{ p }}"
            region: "{{ region }}"
            network:
              assign_public_ip: true
            image_id: "{{ image }}"
            wait: true
            tags:
              Environment: Testing
              Name: "mainos"
      register: X
    - name: "debugging the output"
      debug:
        var: X["instances"][0]["network_interfaces"][0]["private_ip_addresses"][0]["association"]["public_ip"]
    - name: Add instance public IP to host group
      add_host: hostname={{ item["network_interfaces"][0]["private_ip_addresses"][0]["association"]["public_ip"] }} groups=ec2hosts
      loop: "{{ X.instances }}"
    - name: create database
      rds_instance:
              engine: mysql
              region: eu-north-1
              db_instance_identifier: "{{ db_name }}"
              instance_type: db.t3.micro
              aws_access_key: "{{ u }}"
              aws_secret_key: "{{ p }}"
              password: "{{ pass_wd }}"
              username: "{{ user }}"
              allocated_storage: 20
          
    - meta: refresh_inventory
    - pause:
          seconds: 30

- hosts: ec2hosts
  ansible_port: 22  
  ansible_user: 'ec2-user'  
  ansible_ssh_private_key_file: "~/.ssh/{{ keyname }}.pem"
  become: yes
  gather_facts: no
  vars:
   mysql_root_password: mysqlroot123
   wordpress_db: wordpress
   wordpress_user: wpuser
   wordpress_password: password123

  tasks:

#######################################################################
# Installing full lampStack and php mysql bindings
#######################################################################

  - name: Installing Complete LampStack
    yum: name={{ item }} state=present
    with_items:
    - httpd24
    - php71
    - mysql55-server
    - php71-mysqlnd
    - php71-mbstring
    - MySQL-python27

  - name: Restarting Lamp-Stack.
    service: name={{ item }} state=restarted enabled=yes
    with_items:
    - mysqld
    - httpd


#######################################################################
# Configuring Mysql And Creating Necessary User,Database for wordpress
#######################################################################

  - name: mysql-removing anon users.
    mysql_user: login_user=root login_password='' name=''  host_all=yes state=absent

  - name: Creating Wordpress Database.
    mysql_db: db="{{wordpress_db}}" state=present

  - name: Creating wordpress user.
    mysql_user: name="{{wordpress_user}}" host=localhost password="{{wordpress_password}}"  priv="{{wordpress_db}}.*:ALL"

  - name: Updating MySql-Root Password.
    mysql_user: name=root host_all=yes password="{{mysql_root_password}}"

#######################################################################
# Configuring Mysql And Creating Necessary User,Database for wordpress
#######################################################################


  - name: Downloading Wodpress.
    get_url: url=http://www.wordpress.org/latest.tar.gz  dest=/tmp/wordpress.tar

  - name: Extracting wordpress contents.
    unarchive: src=/tmp/wordpress.tar dest=/tmp/  remote_src=yes

  - name: Copying wordpress contents.
    shell: "cp -r /tmp/wordpress/*  /var/www/html/"


  - name: Copying wp-config.php file.
    copy: src=/var/www/html/wp-config-sample.php  dest=/var/www/html/wp-config.php remote_src=yes

#######################################################################
# Cleaning extracted directory and tar file
#######################################################################

  - name: Removing Wordpress.tar
    file: path=/tmp/wordpress.tar state=absent

  - name: Removing Wodpress Extracted Directory.
    file: path=/tmp/wordpress state=absent

#######################################################################
# Wordpress Configuration
#######################################################################

  - name: Chaning Doc-root permission.
    shell: 'chown -R apache:apache /var/www/html/'
    args:
     warn: false # set warn=false to prevent warning

  - name: Update WordPress config file
    lineinfile:
      dest: "/var/www/html/wp-config.php"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
     - {'regexp': "define\\('DB_NAME', '(.)+'\\);", 'line': "define('DB_NAME', '{{wordpress_db}}');"}
     - {'regexp': "define\\('DB_USER', '(.)+'\\);", 'line': "define('DB_USER', '{{wordpress_user}}');"}
     - {'regexp': "define\\('DB_PASSWORD', '(.)+'\\);", 'line': "define('DB_PASSWORD', '{{wordpress_password}}');"}


#######################################################################
# Final Service Restart
#######################################################################

  - name: Restarting LampStack.
    service: name={{ item }} state=restarted
    with_items:
    - mysqld
    - httpd



  
                    
                     
                    
