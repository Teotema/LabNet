- hosts: localhost
  vars_prompt:
          - name: "db_name"
            prompt: "enter database name"
            private: no
          - name: "user"
            prompt: "enter the master username"
            private: no 
          - name: "pass_wd"
            prompt: "enter the password for your database master"
            private: yes
  vars_files:
          - "secret.yml"
  vars:
    key_name: my_aws             # Key used for SSH
    region: ap-southeast-2       # Region may affect response and pricing
    image: ami-06cd706b6bacee637 # look in ec2 > ami (filter owner alias: amazon) or amis of manually launched instances
    id: "example testing"
    instance_type: t3.micro       # Choose instance type, check AWS for pricing
    # vpc_id: subnet-012345
    sec_group: "test-security-group"
  tasks:
    - name: Provisioning EC2 instances
      block:

        - name: Create security group
          amazon.aws.ec2_security_group:
            name: "{{ sec_group }}"
            description: "Sec group for app"
            region: "{{ region }}"
            aws_access_key: "{{u}}"  # From vault as defined
            aws_secret_key: "{{p}}"  # From vault as defined
            rules:                                # allows ssh on port 22
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
                rule_desc: allow all on ssh port

        - name: Amazon EC2 | Create Key Pair      # Create key pair for ssh
          amazon.aws.ec2_key:
            name: "{{ key_name }}"
            region: "{{ region }}"
            aws_access_key: "{{u}}"  # From vault as defined
            aws_secret_key: "{{p}}"  # From vault as defined
            key_material: "{{ item }}"
          with_file: /path/to/my_aws.pub

        - name: Start an instance with a public IP address
          amazon.aws.ec2_instance:
            name: "public-compute-instance"
            key_name: "{{ key_name }}"
            # vpc_subnet_id: "{{ vpc_id }}"
            instance_type: "{{ instance_type }}"
            security_group: "{{ sec_group }}"
            aws_access_key: "{{ u }}"
            aws_secret_key: "{{ p }}"
            region: "{{ region }}"
            network:
              assign_public_ip: true
            image_id: "{{ image }}"
            tags:
              Environment: Testing

        # Always require the 'create_ec2' tag to provision EC2 instance
      tags: ['never', 'create_ec2'] 

    - name: Facts
      block: # this block prints out instance data

      - name: Get instances facts
        ec2_instance_info:
          aws_access_key: "{{ u }}"
          aws_secret_key: "{{ p }}"
          region: "{{ region }}"
        register: result

      - name: Instances ID
        debug:
          msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
        loop: "{{ result.instances }}"
        tags: always
         
    - name: create database
      rds_instance:
              engine: mysql
              region: eu-north-1
              db_instance_identifier: "{{ db_name }}"
              instance_type: db.t2.small
              aws_access_key: "{{ u }}"
              aws_secret_key: "{{ p }}"
              password: "{{ pass_wd }}"
              username: "{{ user }}"
           
         
          
    - meta: refresh_inventory
    - pause:
          seconds: 30
- hosts: "tag_Name_mainos"
  tasks:
          - name: "installing httpd"
            package:
                    name: "httpd"
                    state: present
          - name: "installing prerequisites for wordpress"
            yum:
                    name:
                            - php
                            - tar
                            - mysql
          - name: "downloading the wordpress tar file"
            ansible.builtin.unarchive:
                    remote_src: yes
                    src: "https://wordpress.org/latest.tar.gz"
                    dest: "/var/www/html/"
          - shell: "amazon-linux-extras install php7.3 -y"
          - shell: "chown -R apache:apache /var/www/html/wordpress"
          - name: "starting the services of the httpd"
            service:
                    name: "httpd"
                    state: started
                    enabled: yes 
                    
                     
                    
